name: Python Package

on:
  push:
    branches:
      - feature    

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8  

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install wheel    
     
      - name: Semantic Versioning
        run: |

          commit_message="${{ github.event.head_commit.message }}"

          commit_message_lowercase=$(echo "$commit_message" | tr 'A-Z' 'a-z') 

          echo "Version before updation: $new_version"

          if [[ $commit_message == *"PATCH"* ]]; then

              version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')

              major_version=$(echo "$version" | cut -d. -f1)

              minor_version=$(echo "$version" | cut -d. -f2)

              patch_version=$(echo "$version" | cut -d. -f3)

              ((patch_version++))   

              new_version="${major_version}.${minor_version}.${patch_version}"

          elif [[ $commit_message == *"MINOR"* ]]; then

              version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')

              major_version=$(echo "$version" | cut -d. -f1)

              minor_version=$(echo "$version" | cut -d. -f2)

              ((minor_version++))

              new_version="${major_version}.${minor_version}.0"   

          elif [[ $commit_message == *"MAJOR"* ]]; then

              version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')

              major_version=$(echo "$version" | cut -d. -f1)

              a=$(expr $major_version + 1)

              new_version="${a}.0.0"      

          else

              version=$(curl -s "https://pypi.org/pypi/sigmoidpythonpackage/json" | jq -r '.info.version')

              major_version=$(echo "$version" | cut -d. -f1)

              minor_version=$(echo "$version" | cut -d. -f2)

              patch_version=$(echo "$version" | cut -d. -f3)

              ((patch_version++))

              new_version="${major_version}.${minor_version}.${patch_version}"

          fi   

          echo "$new_version" > VERSION.txt

          echo "Updated version: $new_version"

          cat VERSION.txt  

      - name: Install pytest
        run: pip install pytest
    
      - name: Run Tests with pytest
        run: pytest src/    

      - name: Build Package
        run: python setup.py sdist bdist_wheel  

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}   
          
